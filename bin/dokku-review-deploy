#!/usr/bin/env sh

set -e

function ensure_app {
  local app_name=${1}
  local exists=$(does_app_exist ${app_name})
  if [ "${exists}" -eq 0 ]; then
    log-info "Preview deployment ${app_name} will be created"
    create_app ${app_name}
  else
    log-info "Preview deployment ${app_name} already created"
  fi
}

function does_app_exist {
  ${DOKKU_CMD} apps:exists ${1} >/dev/null 2>&1 && echo 1 || echo 0
}

function create_app {
  ${DOKKU_CMD} apps:create ${1}
}

function enable_letsencrypt {
  local app_name=${1}
  local exists=$(is_letsencrypt_enabled ${app_name})
  if [ "${exists}" -eq 0 ]; then
    log-info "Let's Encrypt for ${app_name} will be created"
    ${DOKKU_CMD} config:set --no-restart $app_name DOKKU_LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    ${DOKKU_CMD} letsencrypt:enable $app_name
  else
    log-info "Let's Encrypt for ${app_name} already created"
  fi
}

function is_letsencrypt_enabled {
  ${DOKKU_CMD} letsencrypt:active ${1} >/dev/null 2>&1 && echo 1 || echo 0
}

function does_service_exist {
  local type=${1}
  local name=${2}
  ${DOKKU_CMD} ${type}:exists ${name} >/dev/null 2>&1 && echo 1 || echo 0
}

function create_service {
  local type=${1}
  local name=${2}
  ${DOKKU_CMD} ${type}:create ${name} || echo
}

function link_service {
  local type=${1}
  local name=${2}
  local alias=${3}
  local app_name=${4}
  if [ -n ${alias} ]; then
    ${DOKKU_CMD} ${type}:link ${name} ${app_name} -a ${alias} || echo
  else
    ${DOKKU_CMD} ${type}:link ${name} ${app_name} || echo
  fi
}

function ensure_service {
  local type=${1}
  local app_name=${2}
  local name="${app_name}-${3}"
  local alias=${4}
  local exists=$(does_service_exist ${type} ${name})
  if [ "${exists}" -eq "1" ]; then
    log-info "Service ${type} as ${name} already created"
  else
    log-info "Service ${type} as ${name} will be created"
    create_service ${type} ${name}
  fi
  link_service ${type} ${name} ${alias} ${app_name}
}

function setup_services {
  local app_name=${1}
  local services=${2}
  for service in ${services}; do
    local type_postfix="${service%:*}"
    local type="${type_postfix%:*}"
    local postfix="${type_postfix##*:}"
    local alias="${service##*:}"
    ensure_service ${type} ${app_name} ${postfix} ${alias}
  done
}

function configure_app {
  local app_name=${1}
  local configs=${2}
  log-info "Setting config for ${app_name}"
  log-info ${configs}
  ${DOKKU_CMD} config:set --no-restart ${app_name} ${configs} || echo
}

setup-ssh

log-info "Creating Dokku preview deployment"

ssh_port=$(parse-ssh-port)
ssh_host=$(parse-ssh-host)

DOKKU_CMD="ssh -p $ssh_port dokku@$ssh_host"

app_name="$(parse-app-name)"
commit_sha="$(parse-ci-commit)"

ensure_app ${REVIEW_APP_NAME}

if [ -n "${APP_CONFIG}" ]; then
  configure_app ${REVIEW_APP_NAME} "${APP_CONFIG}"
fi

if [ -n "$SERVICES" ]; then
  setup_services ${REVIEW_APP_NAME} "${SERVICES}"
fi

log-info "Pushing to Dokku host"

if [ -n "$REVIEW_APP_NAME" ] && [ "$app_name" != "$REVIEW_APP_NAME" ]; then
  GIT_REMOTE_URL="${GIT_REMOTE_URL%"/$app_name"}/${REVIEW_APP_NAME}"
fi

if [ -n "$CUSTOM_DOCKERFILE_LOCATION" ]; then
  ${DOKKU_CMD} builder-dockerfile:set $REVIEW_APP_NAME dockerfile-path $CUSTOM_DOCKERFILE_LOCATION
fi

# This is to circumvent "fatal: unsafe repository ('/github/workspace' is owned by someone else)"
chown root: /github/workspace

# shellcheck disable=SC2086
git push $GIT_PUSH_FLAGS "$GIT_REMOTE_URL" "$commit_sha:refs/heads/$BRANCH"

if [ -n "$PORT_MAPPING" ]; then
  ${DOKKU_CMD} proxy:ports-set $REVIEW_APP_NAME $PORT_MAPPING
fi

if [ -n "$LETSENCRYPT_EMAIL" ]; then
  enable_letsencrypt ${REVIEW_APP_NAME}
fi

